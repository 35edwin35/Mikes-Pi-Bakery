# calSetter - defines a grid  of sample pointsimport cv2import os, pickleppr = 8 #  points per rownor = 8 #  number of rowsmaxclick = nor * 2ix,iy = -1,-1target = [(-10,-10),(-10,-10)]pointer = 0showRow = Falsepoints = [ (-10,-10) for p in range (0,ppr*nor) ]# mouse callback functiondef track_mouse(event,x,y,flags,param):    global ix,iy,pointer, showRow   if event == cv2.EVENT_LBUTTONDOWN:        # save mouse position       if pointer == maxclick :          pointer = 0          showRow = False       target[pointer & 1] = (x,y)       if (pointer & 1) == 1:          calculatePoints(pointer / 2)          showRow = True       pointer +=1       if pointer == maxclick:          print"locate start point on row 0 again or 's' to save points"       else :          if (pointer & 1)== 0:             print "locate start point on row",pointer/2          else :             print "locate end point on row",pointer/2   elif event == cv2.EVENT_MOUSEMOVE:       ix,iy = x,ycv2.namedWindow("Sample point define", cv2.CV_WINDOW_AUTOSIZE)camera_index = 0capture = cv2.VideoCapture(camera_index)if not capture.isOpened():    capature.open()cv2.setMouseCallback("Sample point define",track_mouse)def main():   global frame   print"Define",nor,"rows of",ppr,"points per row"   print"press Esc to quit"   print "locate start point on row 0"   while(True):     ret, frame = capture.read()     cv2.circle(frame,(ix,iy),10,(0,0,255),1)     cv2.line(frame,(0,240),(640,240),(0,0,225),1)     cv2.line(frame,(320,0),(320,480),(0,0,225),1)     overlay()     cv2.imshow("Sample point define", frame)     k = cv2.waitKey(1) & 0xFF      if k == 27:         finish()     if (k == ord('s')) & (pointer == maxclick) :        print "save points - click on python consol"        fName = raw_input("type file name ")        print"saving points to file",fName        f = open(fName+'.txt','w')        pickle.dump(points,f)        f.close()        finish()      def finish():      print"all done"   capture.release()   cv2.destroyAllWindows()   cv2.waitKey(1)   os._exit(1)   def calculatePoints(row):   global points   startx = target[0][0]   starty = target[0][1]   endx = target[1][0]   endy = target[1][1]    xinc = float((endx - startx)/ (float(ppr) - 1.0) )   yinc = float((endy - starty)/ (float(ppr) - 1.0) )   for point in range(0,ppr):      points[point +(ppr*row)] = (startx + int(xinc * point),starty + int(yinc * point) )def overlay():   global pointer   if pointer & 1 == 1 :      cv2.circle(frame,target[0],10,(0,255,0),1)   if showRow :      # draw the sample row positions so far defined      for i in range (0,(pointer/2)*ppr):         cv2.circle(frame,points[i],10,(0,255,255),1)         if __name__ == '__main__':        main()